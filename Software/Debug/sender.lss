
sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  000006d6  0000076a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800228  00800228  00000792  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a39  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ff  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b56  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00004244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000866  00000000  00000000  000045f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081d  00000000  00000000  00004e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	0c c2       	rjmp	.+1048   	; 0x41e <__vector_1>
   6:	00 00       	nop
   8:	fc c0       	rjmp	.+504    	; 0x202 <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	bd c0       	rjmp	.+378    	; 0x1cc <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 33       	cpi	r26, 0x32	; 50
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d8 c2       	rjmp	.+1456   	; 0x6d2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
int increaseTime = 0;
volatile unsigned int badekar_counter = 0;

int main(void)
{	
	InitUART(9600, 8);
 124:	48 e0       	ldi	r20, 0x08	; 8
 126:	60 e8       	ldi	r22, 0x80	; 128
 128:	75 e2       	ldi	r23, 0x25	; 37
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	1e d2       	rcall	.+1084   	; 0x56c <InitUART>
	initLEDport();
 130:	0b d1       	rcall	.+534    	; 0x348 <initLEDport>
    initInterrupt();
 132:	f9 d0       	rcall	.+498    	; 0x326 <initInterrupt>
 	initTimer();
 134:	e3 d0       	rcall	.+454    	; 0x2fc <initTimer>
	initPort();
 136:	03 d1       	rcall	.+518    	; 0x33e <initPort>
	
	sei();
 138:	78 94       	sei
// 		if(sek %2 == 0)
//  		{
//  		toggleLED(5);
// 		}
		
		min = getmin();
 13a:	97 d0       	rcall	.+302    	; 0x26a <getmin>
 13c:	8c 01       	movw	r16, r24
 13e:	92 d0       	rcall	.+292    	; 0x264 <gethour>
		hour = gethour();
 140:	7c 01       	movw	r14, r24
 142:	c0 91 2e 02 	lds	r28, 0x022E	; 0x80022e <sek>
}


int getGlobalSek()
{
	return sek;
 146:	d0 91 2f 02 	lds	r29, 0x022F	; 0x80022f <sek+0x1>
		min = getmin();
		hour = gethour();
	
		RealTimeSek = getGlobalSek();
	 
		toggleLED(3);
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	01 d1       	rcall	.+514    	; 0x350 <toggleLED>
		  		
 		status=compareTimeStart(min,hour,RealTimeSek);
 14e:	ae 01       	movw	r20, r28
 150:	b7 01       	movw	r22, r14
 152:	c8 01       	movw	r24, r16
 154:	ef d1       	rcall	.+990    	; 0x534 <compareTimeStart>
 156:	01 97       	sbiw	r24, 0x01	; 1
 		 		
		if(status == 1)
 158:	51 f4       	brne	.+20     	; 0x16e <main+0x4a>
 15a:	93 d1       	rcall	.+806    	; 0x482 <taendlys>
		{
			taendlys();
 15c:	d0 93 2b 02 	sts	0x022B, r29	; 0x80022b <increaseTime+0x1>
			increaseTime = RealTimeSek;
 160:	c0 93 2a 02 	sts	0x022A, r28	; 0x80022a <increaseTime>
 164:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <times+0x1>
			times=0;
 168:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <times>
 16c:	22 c0       	rjmp	.+68     	; 0x1b2 <main+0x8e>
 16e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <increaseTime>
		}
		
		if(RealTimeSek == increaseTime + 60  && times < 6 ) //1800 er en random værdi
 172:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <increaseTime+0x1>
 176:	cc 96       	adiw	r24, 0x3c	; 60
 178:	8c 17       	cp	r24, r28
 17a:	9d 07       	cpc	r25, r29
 17c:	d1 f4       	brne	.+52     	; 0x1b2 <main+0x8e>
 17e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <times>
 182:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <times+0x1>
 186:	06 97       	sbiw	r24, 0x06	; 6
 188:	a4 f4       	brge	.+40     	; 0x1b2 <main+0x8e>
 18a:	a9 d1       	rcall	.+850    	; 0x4de <increaselys>
		{
			increaselys();
 18c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <increaseTime>
			increaseTime += 1800; 
 190:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <increaseTime+0x1>
 194:	88 5f       	subi	r24, 0xF8	; 248
 196:	98 4f       	sbci	r25, 0xF8	; 248
 198:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <increaseTime+0x1>
 19c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <increaseTime>
 1a0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <times>
			times++; 
 1a4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <times+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <times+0x1>
 1ae:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <times>
 1b2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
// 		{
// 			sluklys();
// 			times = 10;
// 		}

		if(badekar_counter > 0)
 1b6:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 1ba:	89 2b       	or	r24, r25
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0x9c>
 1be:	bd cf       	rjmp	.-134    	; 0x13a <main+0x16>
 1c0:	57 d0       	rcall	.+174    	; 0x270 <fyldbadekar>
		{
			fyldbadekar();
 1c2:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x1>
			badekar_counter = 0;
 1c6:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 1ca:	b7 cf       	rjmp	.-146    	; 0x13a <main+0x16>

000001cc <__vector_20>:
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
	}
}

//real time
ISR(TIMER1_OVF_vect)
{ 
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
  sek++;
 1da:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <sek>
 1de:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <sek+0x1>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <sek+0x1>
 1e8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <sek>
  
  if( sek > 86500) 
 1ec:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <sek>
 1f0:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <sek+0x1>
  {
	 sek=0;
  }
}
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_2>:

//til badekaret 
ISR(INT1_vect) 
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	0b b6       	in	r0, 0x3b	; 59
 20e:	0f 92       	push	r0
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	badekar_counter++;	
 228:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 22c:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__data_end+0x1>
 236:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
	toggleLED(2);
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	89 d0       	rcall	.+274    	; 0x350 <toggleLED>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <gethour>:
 */ 

int gethour()
{
	return 0;
}
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	08 95       	ret

0000026a <getmin>:

int getmin()
{
	return 31;
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret

00000270 <fyldbadekar>:

#define F_CPU 16000000
#include  <util/delay.h>

void fyldbadekar()
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	68 97       	sbiw	r28, 0x18	; 24
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
	
	toggleLED(7);
 284:	87 e0       	ldi	r24, 0x07	; 7
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	63 d0       	rcall	.+198    	; 0x350 <toggleLED>
	char Adresse[] = {'0','1','0','1','1','0','0','1'};
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	e0 e0       	ldi	r30, 0x00	; 0
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	de 01       	movw	r26, r28
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <fyldbadekar+0x24>
	char startFunktion[] = {'0','1','0','1','0','1','1','0'};
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	e8 e0       	ldi	r30, 0x08	; 8
 2a0:	f2 e0       	ldi	r31, 0x02	; 2
 2a2:	de 01       	movw	r26, r28
 2a4:	19 96       	adiw	r26, 0x09	; 9
 2a6:	01 90       	ld	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	8a 95       	dec	r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <fyldbadekar+0x36>
	char stopFunktion[] = {'0','1','0','1','1','0','0','1'};
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	e0 e0       	ldi	r30, 0x00	; 0
 2b2:	f2 e0       	ldi	r31, 0x02	; 2
 2b4:	de 01       	movw	r26, r28
 2b6:	51 96       	adiw	r26, 0x11	; 17
 2b8:	01 90       	ld	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	8a 95       	dec	r24
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <fyldbadekar+0x48>
	
	sendX10(Adresse,startFunktion); //tænd 
 2c0:	be 01       	movw	r22, r28
 2c2:	67 5f       	subi	r22, 0xF7	; 247
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	ce 01       	movw	r24, r28
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	51 d0       	rcall	.+162    	; 0x36e <sendX10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	89 e6       	ldi	r24, 0x69	; 105
 2d0:	98 e1       	ldi	r25, 0x18	; 24
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <fyldbadekar+0x62>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <fyldbadekar+0x6c>
 2dc:	00 00       	nop
	
	_delay_ms(500);
	
	sendX10(Adresse,stopFunktion); //sluk
 2de:	be 01       	movw	r22, r28
 2e0:	6f 5e       	subi	r22, 0xEF	; 239
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	ce 01       	movw	r24, r28
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	42 d0       	rcall	.+132    	; 0x36e <sendX10>
 2ea:	68 96       	adiw	r28, 0x18	; 24
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <initTimer>:

void initTimer()
{
	//Lys Timer1 initiering
		//normal mode 
		TCCR1A = 0b00000000;
 2fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
		TCCR1B = 0b00000100; //prescale 1024
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		TCNT1 = 3037; //49912
 306:	8d ed       	ldi	r24, 0xDD	; 221
 308:	9b e0       	ldi	r25, 0x0B	; 11
 30a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 30e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		
	//Lys timer 3 initiering
		TCNT3 = 0;
 312:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 316:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
		TCCR3A = 0b00000000;
 31a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
		TCCR3B = 0b00000101; //prescale 1024
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
 324:	08 95       	ret

00000326 <initInterrupt>:
}

void initInterrupt()
{
	//Lys interrupt(int2) + zeroCross(int0) + badekar(int1)
	EICRA = 0b00101111;
 326:	8f e2       	ldi	r24, 0x2F	; 47
 328:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK |= 0b00000111; //INT0 + INT2 enable
 32c:	8d b3       	in	r24, 0x1d	; 29
 32e:	87 60       	ori	r24, 0x07	; 7
 330:	8d bb       	out	0x1d, r24	; 29
	
	//enables timer 1 interrupt 
	TIMSK1 |= 0b00000001;  //interrupt på overflow 
 332:	ef e6       	ldi	r30, 0x6F	; 111
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	80 83       	st	Z, r24
 33c:	08 95       	ret

0000033e <initPort>:
}

void initPort()
 {
	 //Port til udgang, x10 sender
	 DDRA = 0xFF;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	81 b9       	out	0x01, r24	; 1
	 PORTA = 00000000; 
 342:	12 b8       	out	0x02, r1	; 2
	 
	 //zerocross
	 DDRD = 0; //laver til indgang 
 344:	1a b8       	out	0x0a, r1	; 10
 346:	08 95       	ret

00000348 <initLEDport>:
	if (led_nr <= MAX_LED_NR)
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = ~0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	84 b9       	out	0x04, r24	; 4
 34c:	15 b8       	out	0x05, r1	; 5
 34e:	08 95       	ret

00000350 <toggleLED>:
void toggleLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	60 f4       	brcc	.+24     	; 0x36c <toggleLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB ^ mask;
 354:	43 b1       	in	r20, 0x03	; 3
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <toggleLED+0x12>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <toggleLED+0xe>
 366:	cb 01       	movw	r24, r22
 368:	84 27       	eor	r24, r20
 36a:	85 b9       	out	0x05, r24	; 5
 36c:	08 95       	ret

0000036e <sendX10>:
#include  <util/delay.h>

volatile unsigned int g_counter = 0;

sendX10(char* adresse, char* data)
{	
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	60 97       	sbiw	r28, 0x10	; 16
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	7b 01       	movw	r14, r22
	//send startsekvens 
	char buffer2[16] = {0};
 390:	8e 01       	movw	r16, r28
 392:	0f 5f       	subi	r16, 0xFF	; 255
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	20 e1       	ldi	r18, 0x10	; 16
 398:	f8 01       	movw	r30, r16
 39a:	11 92       	st	Z+, r1
 39c:	2a 95       	dec	r18
 39e:	e9 f7       	brne	.-6      	; 0x39a <sendX10+0x2c>
	
	strcpy(buffer2,adresse); 
 3a0:	bc 01       	movw	r22, r24
 3a2:	c8 01       	movw	r24, r16
 3a4:	8f d1       	rcall	.+798    	; 0x6c4 <strcpy>
	
	strcat(buffer2,data);
 3a6:	b7 01       	movw	r22, r14
 3a8:	c8 01       	movw	r24, r16
 3aa:	81 d1       	rcall	.+770    	; 0x6ae <strcat>
	
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
	g_counter = 0;
 3ac:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <g_counter+0x1>
 3b0:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <g_counter>
 3b4:	78 01       	movw	r14, r16
 3b6:	6e 01       	movw	r12, r28
 3b8:	f1 e1       	ldi	r31, 0x11	; 17
 3ba:	cf 0e       	add	r12, r31
 3bc:	d1 1c       	adc	r13, r1
	
	strcat(buffer2,data);
	
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
 3be:	00 e0       	ldi	r16, 0x00	; 0
 3c0:	10 e0       	ldi	r17, 0x00	; 0
	g_counter = 0;
	
	while  (counter < 16) //tjekker om alle tegn er sendt
	{
		PORTA &= 11111110;
 3c2:	92 b1       	in	r25, 0x02	; 2
 3c4:	96 7c       	andi	r25, 0xC6	; 198
 3c6:	92 b9       	out	0x02, r25	; 2
		
		while (x10_counter == g_counter) //tjekker om der er kommet zeroCross
 3c8:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <g_counter>
 3cc:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <g_counter+0x1>
 3d0:	02 17       	cp	r16, r18
 3d2:	13 07       	cpc	r17, r19
 3d4:	c9 f3       	breq	.-14     	; 0x3c8 <sendX10+0x5a>
		{
		}
		//assert(x10_counter+1 == g_counter);
		
 		x10_counter = g_counter;
 3d6:	00 91 30 02 	lds	r16, 0x0230	; 0x800230 <g_counter>
 3da:	10 91 31 02 	lds	r17, 0x0231	; 0x800231 <g_counter+0x1>
		
		char c;
		
		c = buffer2[counter];
 3de:	f7 01       	movw	r30, r14
 3e0:	81 91       	ld	r24, Z+
 3e2:	7f 01       	movw	r14, r30
		
		//sætte ben højt, hvis c = 1
		if(c==1)
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	11 f4       	brne	.+4      	; 0x3ec <sendX10+0x7e>
		{
			PORTA |= 00000001;
 3e8:	10 9a       	sbi	0x02, 0	; 2
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <sendX10+0x88>
		}

		//sætte ben højt, hvis c = 0
		if(c==0)
 3ec:	81 11       	cpse	r24, r1
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <sendX10+0x88>
		{
			PORTA &= 11111110;
 3f0:	92 b1       	in	r25, 0x02	; 2
 3f2:	96 7c       	andi	r25, 0xC6	; 198
		}
		
		SendChar(c);
 3f4:	92 b9       	out	0x02, r25	; 2
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	09 d1       	rcall	.+530    	; 0x60c <SendChar>
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
	g_counter = 0;
	
	while  (counter < 16) //tjekker om alle tegn er sendt
 3fa:	ec 14       	cp	r14, r12
 3fc:	fd 04       	cpc	r15, r13
 3fe:	09 f7       	brne	.-62     	; 0x3c2 <sendX10+0x54>
		
		SendChar(c);

		counter++;
	}
}
 400:	60 96       	adiw	r28, 0x10	; 16
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	08 95       	ret

0000041e <__vector_1>:

//zero cross
ISR(INT0_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	0b b6       	in	r0, 0x3b	; 59
 42a:	0f 92       	push	r0
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
	toggleLED(2);
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	83 df       	rcall	.-250    	; 0x350 <toggleLED>
	g_counter++;
 44a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <g_counter>
 44e:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <g_counter+0x1>
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <g_counter+0x1>
 458:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <g_counter>
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <taendlys>:
{
	char stopArray[] = {'0','1','0','1','1','0','0','1'}; //stop
	char adresseArray[] = {'0','1','0','1','0','1','1','0'};
		
	sendX10(adresseArray, stopArray);
}
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	60 97       	sbiw	r28, 0x10	; 16
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	85 e0       	ldi	r24, 0x05	; 5
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	5a df       	rcall	.-332    	; 0x350 <toggleLED>
 49c:	88 e0       	ldi	r24, 0x08	; 8
 49e:	e0 e1       	ldi	r30, 0x10	; 16
 4a0:	f2 e0       	ldi	r31, 0x02	; 2
 4a2:	de 01       	movw	r26, r28
 4a4:	11 96       	adiw	r26, 0x01	; 1
 4a6:	01 90       	ld	r0, Z+
 4a8:	0d 92       	st	X+, r0
 4aa:	8a 95       	dec	r24
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <taendlys+0x24>
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	e0 e1       	ldi	r30, 0x10	; 16
 4b2:	f2 e0       	ldi	r31, 0x02	; 2
 4b4:	de 01       	movw	r26, r28
 4b6:	19 96       	adiw	r26, 0x09	; 9
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <taendlys+0x36>
 4c0:	be 01       	movw	r22, r28
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	ce 01       	movw	r24, r28
 4c8:	09 96       	adiw	r24, 0x09	; 9
 4ca:	51 df       	rcall	.-350    	; 0x36e <sendX10>
 4cc:	60 96       	adiw	r28, 0x10	; 16
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <increaselys>:

void increaselys()
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	60 97       	sbiw	r28, 0x10	; 16
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	char increaseArray[] = {'0','1','0','1','1','0','1','0'}; //increase
 4f2:	88 e0       	ldi	r24, 0x08	; 8
 4f4:	e0 e2       	ldi	r30, 0x20	; 32
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	de 01       	movw	r26, r28
 4fa:	11 96       	adiw	r26, 0x01	; 1
 4fc:	01 90       	ld	r0, Z+
 4fe:	0d 92       	st	X+, r0
 500:	8a 95       	dec	r24
 502:	e1 f7       	brne	.-8      	; 0x4fc <increaselys+0x1e>
	char adresseArray[] = {'0','1','0','1','0','1','1','0',};
 504:	88 e0       	ldi	r24, 0x08	; 8
 506:	e0 e1       	ldi	r30, 0x10	; 16
 508:	f2 e0       	ldi	r31, 0x02	; 2
 50a:	de 01       	movw	r26, r28
 50c:	19 96       	adiw	r26, 0x09	; 9
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	8a 95       	dec	r24
 514:	e1 f7       	brne	.-8      	; 0x50e <increaselys+0x30>
	
	sendX10(adresseArray, increaseArray);
 516:	be 01       	movw	r22, r28
 518:	6f 5f       	subi	r22, 0xFF	; 255
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	ce 01       	movw	r24, r28
 51e:	09 96       	adiw	r24, 0x09	; 9
 520:	26 df       	rcall	.-436    	; 0x36e <sendX10>
}
 522:	60 96       	adiw	r28, 0x10	; 16
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <compareTimeStart>:
 *  Author: sandr
 */ 
#include <stdbool.h>

int compareTimeStart(int min, int hour, int RealTimeSek)
{
 534:	9c 01       	movw	r18, r24
 536:	fb 01       	movw	r30, r22
 538:	ca 01       	movw	r24, r20
	int RealTimeMin, WakeUpMin;
	
	RealTimeMin = RealTimeSek/60;
 53a:	6c e3       	ldi	r22, 0x3C	; 60
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	6e d0       	rcall	.+220    	; 0x61c <__divmodhi4>
	
	WakeUpMin=(hour*60+min)-30; 
 540:	4c e3       	ldi	r20, 0x3C	; 60
 542:	4e 9f       	mul	r20, r30
 544:	c0 01       	movw	r24, r0
 546:	4f 9f       	mul	r20, r31
 548:	90 0d       	add	r25, r0
 54a:	11 24       	eor	r1, r1
 54c:	82 0f       	add	r24, r18
 54e:	93 1f       	adc	r25, r19
 550:	9c 01       	movw	r18, r24
 552:	2e 51       	subi	r18, 0x1E	; 30
 554:	31 09       	sbc	r19, r1
	
	if(WakeUpMin<0) 
 556:	12 f4       	brpl	.+4      	; 0x55c <compareTimeStart+0x28>
	{
		WakeUpMin =1440 + WakeUpMin; //1440 = 24h og WakeUpMin er minus
 558:	20 56       	subi	r18, 0x60	; 96
 55a:	3a 4f       	sbci	r19, 0xFA	; 250
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	26 17       	cp	r18, r22
 562:	37 07       	cpc	r19, r23
 564:	11 f0       	breq	.+4      	; 0x56a <compareTimeStart+0x36>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else
	
	return 0;
}
 56a:	08 95       	ret

0000056c <InitUART>:
	   
   }
   //Ny data er kommet, så returner dataen
   return UDR0;
   
}
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	8b 01       	movw	r16, r22
 572:	9c 01       	movw	r18, r24
 574:	0c 52       	subi	r16, 0x2C	; 44
 576:	11 40       	sbci	r17, 0x01	; 1
 578:	21 09       	sbc	r18, r1
 57a:	31 09       	sbc	r19, r1
 57c:	05 3d       	cpi	r16, 0xD5	; 213
 57e:	10 4c       	sbci	r17, 0xC0	; 192
 580:	21 40       	sbci	r18, 0x01	; 1
 582:	31 05       	cpc	r19, r1
 584:	08 f0       	brcs	.+2      	; 0x588 <InitUART+0x1c>
 586:	3f c0       	rjmp	.+126    	; 0x606 <InitUART+0x9a>
 588:	2b ef       	ldi	r18, 0xFB	; 251
 58a:	24 0f       	add	r18, r20
 58c:	24 30       	cpi	r18, 0x04	; 4
 58e:	d8 f5       	brcc	.+118    	; 0x606 <InitUART+0x9a>
 590:	20 e2       	ldi	r18, 0x20	; 32
 592:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 596:	45 30       	cpi	r20, 0x05	; 5
 598:	19 f4       	brne	.+6      	; 0x5a0 <InitUART+0x34>
 59a:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 59e:	0c c0       	rjmp	.+24     	; 0x5b8 <InitUART+0x4c>
 5a0:	46 30       	cpi	r20, 0x06	; 6
 5a2:	21 f4       	brne	.+8      	; 0x5ac <InitUART+0x40>
 5a4:	22 e0       	ldi	r18, 0x02	; 2
 5a6:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <InitUART+0x56>
 5ac:	47 30       	cpi	r20, 0x07	; 7
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <InitUART+0x4c>
 5b0:	24 e0       	ldi	r18, 0x04	; 4
 5b2:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <InitUART+0x56>
 5b8:	48 30       	cpi	r20, 0x08	; 8
 5ba:	19 f4       	brne	.+6      	; 0x5c2 <InitUART+0x56>
 5bc:	26 e0       	ldi	r18, 0x06	; 6
 5be:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 5c2:	28 e1       	ldi	r18, 0x18	; 24
 5c4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 5c8:	dc 01       	movw	r26, r24
 5ca:	cb 01       	movw	r24, r22
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	9c 01       	movw	r18, r24
 5de:	ad 01       	movw	r20, r26
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	44 1f       	adc	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	22 0f       	add	r18, r18
 5ea:	33 1f       	adc	r19, r19
 5ec:	44 1f       	adc	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	74 e2       	ldi	r23, 0x24	; 36
 5f4:	84 ef       	ldi	r24, 0xF4	; 244
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	24 d0       	rcall	.+72     	; 0x642 <__udivmodsi4>
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	31 09       	sbc	r19, r1
 5fe:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 602:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <SendChar>:
*************************************************************************/
void SendChar(char Tegn)
{
   //Afvent fri bane
   //Når bit 5 i UCSR0A er 1 er der fri bane
   while((UCSR0A & 0b00100000) == 0)
 60c:	e0 ec       	ldi	r30, 0xC0	; 192
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	90 81       	ld	r25, Z
 612:	95 ff       	sbrs	r25, 5
 614:	fd cf       	rjmp	.-6      	; 0x610 <SendChar+0x4>
   {
	   
   }
   //Skriver tegnet i vores sende-register:
   UDR0 = Tegn;
 616:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 61a:	08 95       	ret

0000061c <__divmodhi4>:
 61c:	97 fb       	bst	r25, 7
 61e:	07 2e       	mov	r0, r23
 620:	16 f4       	brtc	.+4      	; 0x626 <__divmodhi4+0xa>
 622:	00 94       	com	r0
 624:	06 d0       	rcall	.+12     	; 0x632 <__divmodhi4_neg1>
 626:	77 fd       	sbrc	r23, 7
 628:	08 d0       	rcall	.+16     	; 0x63a <__divmodhi4_neg2>
 62a:	2d d0       	rcall	.+90     	; 0x686 <__udivmodhi4>
 62c:	07 fc       	sbrc	r0, 7
 62e:	05 d0       	rcall	.+10     	; 0x63a <__divmodhi4_neg2>
 630:	3e f4       	brtc	.+14     	; 0x640 <__divmodhi4_exit>

00000632 <__divmodhi4_neg1>:
 632:	90 95       	com	r25
 634:	81 95       	neg	r24
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__divmodhi4_neg2>:
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255

00000640 <__divmodhi4_exit>:
 640:	08 95       	ret

00000642 <__udivmodsi4>:
 642:	a1 e2       	ldi	r26, 0x21	; 33
 644:	1a 2e       	mov	r1, r26
 646:	aa 1b       	sub	r26, r26
 648:	bb 1b       	sub	r27, r27
 64a:	fd 01       	movw	r30, r26
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__udivmodsi4_ep>

0000064e <__udivmodsi4_loop>:
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	ee 1f       	adc	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	a2 17       	cp	r26, r18
 658:	b3 07       	cpc	r27, r19
 65a:	e4 07       	cpc	r30, r20
 65c:	f5 07       	cpc	r31, r21
 65e:	20 f0       	brcs	.+8      	; 0x668 <__udivmodsi4_ep>
 660:	a2 1b       	sub	r26, r18
 662:	b3 0b       	sbc	r27, r19
 664:	e4 0b       	sbc	r30, r20
 666:	f5 0b       	sbc	r31, r21

00000668 <__udivmodsi4_ep>:
 668:	66 1f       	adc	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	1a 94       	dec	r1
 672:	69 f7       	brne	.-38     	; 0x64e <__udivmodsi4_loop>
 674:	60 95       	com	r22
 676:	70 95       	com	r23
 678:	80 95       	com	r24
 67a:	90 95       	com	r25
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	bd 01       	movw	r22, r26
 682:	cf 01       	movw	r24, r30
 684:	08 95       	ret

00000686 <__udivmodhi4>:
 686:	aa 1b       	sub	r26, r26
 688:	bb 1b       	sub	r27, r27
 68a:	51 e1       	ldi	r21, 0x11	; 17
 68c:	07 c0       	rjmp	.+14     	; 0x69c <__udivmodhi4_ep>

0000068e <__udivmodhi4_loop>:
 68e:	aa 1f       	adc	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	a6 17       	cp	r26, r22
 694:	b7 07       	cpc	r27, r23
 696:	10 f0       	brcs	.+4      	; 0x69c <__udivmodhi4_ep>
 698:	a6 1b       	sub	r26, r22
 69a:	b7 0b       	sbc	r27, r23

0000069c <__udivmodhi4_ep>:
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	5a 95       	dec	r21
 6a2:	a9 f7       	brne	.-22     	; 0x68e <__udivmodhi4_loop>
 6a4:	80 95       	com	r24
 6a6:	90 95       	com	r25
 6a8:	bc 01       	movw	r22, r24
 6aa:	cd 01       	movw	r24, r26
 6ac:	08 95       	ret

000006ae <strcat>:
 6ae:	fb 01       	movw	r30, r22
 6b0:	dc 01       	movw	r26, r24
 6b2:	0d 90       	ld	r0, X+
 6b4:	00 20       	and	r0, r0
 6b6:	e9 f7       	brne	.-6      	; 0x6b2 <strcat+0x4>
 6b8:	11 97       	sbiw	r26, 0x01	; 1
 6ba:	01 90       	ld	r0, Z+
 6bc:	0d 92       	st	X+, r0
 6be:	00 20       	and	r0, r0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <strcat+0xc>
 6c2:	08 95       	ret

000006c4 <strcpy>:
 6c4:	fb 01       	movw	r30, r22
 6c6:	dc 01       	movw	r26, r24
 6c8:	01 90       	ld	r0, Z+
 6ca:	0d 92       	st	X+, r0
 6cc:	00 20       	and	r0, r0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <strcpy+0x4>
 6d0:	08 95       	ret

000006d2 <_exit>:
 6d2:	f8 94       	cli

000006d4 <__stop_program>:
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <__stop_program>
