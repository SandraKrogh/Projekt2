
sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800212  00800212  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d9  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f66  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079f  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000458  00000000  00000000  0000383e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	b4 c0       	rjmp	.+360    	; 0x176 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	77 c0       	rjmp	.+238    	; 0x140 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	2c c1       	rjmp	.+600    	; 0x37a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define F_CPU 16000000
#include  <util/delay.h>

int main(void)
{	
	initLEDport();
 124:	bc d0       	rcall	.+376    	; 0x29e <initLEDport>
	initInterrupt();
 126:	a5 d0       	rcall	.+330    	; 0x272 <initInterrupt>
	initTimer();
 128:	90 d0       	rcall	.+288    	; 0x24a <initTimer>
 12a:	b4 d0       	rcall	.+360    	; 0x294 <initPort>
	initPort();
 12c:	78 94       	sei
 12e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
    /* Replace with your application code */
	
	while(1) 
    {
		//test af sekund tæller
 		if(sek %2 == 0)
 132:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 136:	80 fd       	sbrc	r24, 0
 138:	fa cf       	rjmp	.-12     	; 0x12e <main+0xa>
 13a:	84 e0       	ldi	r24, 0x04	; 4
 		{
 		toggleLED(4);
 13c:	b4 d0       	rcall	.+360    	; 0x2a6 <toggleLED>
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <main+0xa>

00000140 <__vector_20>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
	}
}

//real time
ISR(TIMER1_OVF_vect)
{ 
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
  sek++;
 14e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 152:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 15c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
  
  if( sek > 86500) 
 160:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 164:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
  {
	 toggleLED(3);
	 sek=0;
  }
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_3>:

//til badekaret 
ISR(INT2_vect) 
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	0b b6       	in	r0, 0x3b	; 59
 182:	0f 92       	push	r0
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	fyldbadekar();
 19c:	13 d0       	rcall	.+38     	; 0x1c4 <fyldbadekar>
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0b be       	out	0x3b, r0	; 59
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <fyldbadekar>:

#define F_CPU 16000000
#include  <util/delay.h>

void fyldbadekar()
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	6b 97       	sbiw	r28, 0x1b	; 27
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	
	char Adresse[] = {'0','1','0','1','1','0','0','1','/0'};
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	e0 e0       	ldi	r30, 0x00	; 0
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	de 01       	movw	r26, r28
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	01 90       	ld	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	8a 95       	dec	r24
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <fyldbadekar+0x1e>
	char startFunktion[] = {'0','1','0','1','0','1','1','0','/0'};
 1ea:	89 e0       	ldi	r24, 0x09	; 9
 1ec:	e9 e0       	ldi	r30, 0x09	; 9
 1ee:	f2 e0       	ldi	r31, 0x02	; 2
 1f0:	de 01       	movw	r26, r28
 1f2:	1a 96       	adiw	r26, 0x0a	; 10
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <fyldbadekar+0x30>
	char stopFunktion[] = {'0','1','0','1','1','0','0','1','/0'};
 1fc:	89 e0       	ldi	r24, 0x09	; 9
 1fe:	e0 e0       	ldi	r30, 0x00	; 0
 200:	f2 e0       	ldi	r31, 0x02	; 2
 202:	de 01       	movw	r26, r28
 204:	53 96       	adiw	r26, 0x13	; 19
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	8a 95       	dec	r24
 20c:	e1 f7       	brne	.-8      	; 0x206 <fyldbadekar+0x42>
	
	sendX10(Adresse,startFunktion); //tænd 
 20e:	be 01       	movw	r22, r28
 210:	66 5f       	subi	r22, 0xF6	; 246
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	55 d0       	rcall	.+170    	; 0x2c4 <sendX10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	8f e4       	ldi	r24, 0x4F	; 79
 21e:	93 ec       	ldi	r25, 0xC3	; 195
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <fyldbadekar+0x5c>
 228:	00 c0       	rjmp	.+0      	; 0x22a <fyldbadekar+0x66>
 22a:	00 00       	nop
	
	_delay_ms(4000);
	
	sendX10(Adresse,stopFunktion); //sluk
 22c:	be 01       	movw	r22, r28
 22e:	6d 5e       	subi	r22, 0xED	; 237
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	46 d0       	rcall	.+140    	; 0x2c4 <sendX10>
 238:	6b 96       	adiw	r28, 0x1b	; 27
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <initTimer>:

void initTimer()
{
	//Lys Timer1 initiering
	//normal mode 
	TCNT1 = 49912;
 24a:	88 ef       	ldi	r24, 0xF8	; 248
 24c:	92 ec       	ldi	r25, 0xC2	; 194
 24e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 252:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1A = 0b00000000;
 256:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00000101; //prescale 1024
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	//Lys timer 3 initiering
	TCNT3 = 0;
 260:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 264:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TCCR3A = 0b00000000;
 268:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000101; //prescale 1024
 26c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
 270:	08 95       	ret

00000272 <initInterrupt>:
}

void initInterrupt()
{
	//Badekar interupt 2 
	EIMSK |= 0b00000100;
 272:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA = 0b00100000;
 274:	e9 e6       	ldi	r30, 0x69	; 105
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	80 83       	st	Z, r24
	
	//Lys interrupt 0 zeroCross
	EICRA = 0b00000011;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	80 83       	st	Z, r24
	EIMSK |= 0b00000001;
 280:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Lys interrupt 3 wait funktion
	EICRA = 0b00000011;
 282:	80 83       	st	Z, r24
	EIMSK |= 0b00001000;
 284:	eb 9a       	sbi	0x1d, 3	; 29
	
	//enables timer 3 interrupt wait funktion
	TIMSK3 = 0b00001000;
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	
	//enables timer 1 interrupt 
	TIMSK1 = 0b00000001;  //interrupt på overflow 
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 292:	08 95       	ret

00000294 <initPort>:
}

void initPort()
 {
	 //Port til udgang, x10 sender
	 DDRA = 0xFF;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	81 b9       	out	0x01, r24	; 1
	 PORTA = 00000000; 
 298:	12 b8       	out	0x02, r1	; 2
	 
	 //zerocross
	 DDRD = 0; //laver til indgang 
 29a:	1a b8       	out	0x0a, r1	; 10
 29c:	08 95       	ret

0000029e <initLEDport>:
	if (led_nr <= MAX_LED_NR)
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = ~0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	84 b9       	out	0x04, r24	; 4
 2a2:	15 b8       	out	0x05, r1	; 5
 2a4:	08 95       	ret

000002a6 <toggleLED>:
void toggleLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	60 f4       	brcc	.+24     	; 0x2c2 <toggleLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB ^ mask;
 2aa:	43 b1       	in	r20, 0x03	; 3
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <toggleLED+0x12>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <toggleLED+0xe>
 2bc:	cb 01       	movw	r24, r22
 2be:	84 27       	eor	r24, r20
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	08 95       	ret

000002c4 <sendX10>:
#include <avr/io.h>
#include <assert.h>
int g_counter = 0;

sendX10(char* adresse, char* data)
{	
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	62 97       	sbiw	r28, 0x12	; 18
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	7b 01       	movw	r14, r22
	//send startsekvens 
	char buffer2[18] = {0};
 2e2:	8e 01       	movw	r16, r28
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	22 e1       	ldi	r18, 0x12	; 18
 2ea:	f8 01       	movw	r30, r16
 2ec:	11 92       	st	Z+, r1
 2ee:	2a 95       	dec	r18
 2f0:	e9 f7       	brne	.-6      	; 0x2ec <sendX10+0x28>
	
	strcpy(buffer2,adresse); 
 2f2:	bc 01       	movw	r22, r24
 2f4:	c8 01       	movw	r24, r16
 2f6:	3a d0       	rcall	.+116    	; 0x36c <strcpy>
	
	strcat(buffer2,data);
 2f8:	b7 01       	movw	r22, r14
 2fa:	c8 01       	movw	r24, r16
 2fc:	2c d0       	rcall	.+88     	; 0x356 <strcat>
 2fe:	f8 01       	movw	r30, r16
	
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
	{
		PORTA &= 11111110;
 304:	92 b1       	in	r25, 0x02	; 2
 306:	96 7c       	andi	r25, 0xC6	; 198
 308:	92 b9       	out	0x02, r25	; 2
		
		while (x10_counter == g_counter) //tjekker om der er kommet zeroCross
 30a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <g_counter>
 30e:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <g_counter+0x1>
 312:	42 17       	cp	r20, r18
 314:	53 07       	cpc	r21, r19
 316:	e9 f3       	breq	.-6      	; 0x312 <sendX10+0x4e>
		{
			
		}
		assert(x10_counter+1 == g_counter);
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	42 17       	cp	r20, r18
 31e:	53 07       	cpc	r21, r19
 320:	09 f0       	breq	.+2      	; 0x324 <sendX10+0x60>
 322:	15 d0       	rcall	.+42     	; 0x34e <abort>
		
		x10_counter = g_counter;
		
		char c;
		
		c = buffer2[counter];
 324:	81 91       	ld	r24, Z+
		
		//sætte ben højt, hvis c = 1
		if(c==1)
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	09 f4       	brne	.+2      	; 0x32c <sendX10+0x68>
		{
			PORTA |= 00000001;
 32a:	10 9a       	sbi	0x02, 0	; 2
		{
			
		}
		assert(x10_counter+1 == g_counter);
		
		x10_counter = g_counter;
 32c:	9a 01       	movw	r18, r20
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
 32e:	40 31       	cpi	r20, 0x10	; 16
 330:	51 05       	cpc	r21, r1
 332:	41 f7       	brne	.-48     	; 0x304 <sendX10+0x40>
		{
			PORTA |= 00000001;
		}
		counter++;
	}
}
 334:	62 96       	adiw	r28, 0x12	; 18
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	08 95       	ret

0000034e <abort>:
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	f8 94       	cli
 354:	12 c0       	rjmp	.+36     	; 0x37a <_exit>

00000356 <strcat>:
 356:	fb 01       	movw	r30, r22
 358:	dc 01       	movw	r26, r24
 35a:	0d 90       	ld	r0, X+
 35c:	00 20       	and	r0, r0
 35e:	e9 f7       	brne	.-6      	; 0x35a <strcat+0x4>
 360:	11 97       	sbiw	r26, 0x01	; 1
 362:	01 90       	ld	r0, Z+
 364:	0d 92       	st	X+, r0
 366:	00 20       	and	r0, r0
 368:	e1 f7       	brne	.-8      	; 0x362 <strcat+0xc>
 36a:	08 95       	ret

0000036c <strcpy>:
 36c:	fb 01       	movw	r30, r22
 36e:	dc 01       	movw	r26, r24
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	00 20       	and	r0, r0
 376:	e1 f7       	brne	.-8      	; 0x370 <strcpy+0x4>
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
