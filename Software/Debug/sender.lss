
sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800212  00800212  00000432  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135d  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcc  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000884  00000000  00000000  000028bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00003144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004da  00000000  00000000  00003a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	e0 c0       	rjmp	.+448    	; 0x1ce <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	33 c1       	rjmp	.+614    	; 0x388 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define F_CPU 16000000
#include  <util/delay.h>

int main(void)
{	
	initLEDport();
 124:	c3 d0       	rcall	.+390    	; 0x2ac <initLEDport>
	//initInterrupt();
	//initTimer();
	initPort();
 126:	bd d0       	rcall	.+378    	; 0x2a2 <initPort>
 128:	86 ee       	ldi	r24, 0xE6	; 230
	
	//Lys Timer1 initiering
	//normal mode
	TCNT1 = 63974; //har før haft 49912
 12a:	99 ef       	ldi	r25, 0xF9	; 249
 12c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 130:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 134:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1A = 0b00000000;
 138:	85 e0       	ldi	r24, 0x05	; 5
	TCCR1B = 0b00000101; //prescale 1024
 13a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 13e:	78 94       	sei

    /* Replace with your application code */
	
	while(1) 
    {
		toggleLED(7);
 140:	87 e0       	ldi	r24, 0x07	; 7
 142:	b8 d0       	rcall	.+368    	; 0x2b4 <toggleLED>
 144:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x30>
 154:	00 00       	nop
 156:	f4 cf       	rjmp	.-24     	; 0x140 <main+0x1c>

00000158 <__vector_20>:
 158:	1f 92       	push	r1
	}
}

//real time
ISR(TIMER1_OVF_vect)
{ 
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
  sek++;
 17e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 182:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 18c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
  if( sek > 10) //skal være 86400
 190:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 194:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 198:	0b 97       	sbiw	r24, 0x0b	; 11
 19a:	34 f0       	brlt	.+12     	; 0x1a8 <__vector_20+0x50>
  {
	 toggleLED(3);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	8a d0       	rcall	.+276    	; 0x2b4 <toggleLED>
	 sek=0;
 1a0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 1a4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
  }
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0b be       	out	0x3b, r0	; 59
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_3>:

//til badekaret 
ISR(INT2_vect) 
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	0b b6       	in	r0, 0x3b	; 59
 1da:	0f 92       	push	r0
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	fyldbadekar();
 1f4:	13 d0       	rcall	.+38     	; 0x21c <fyldbadekar>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <fyldbadekar>:

#define F_CPU 16000000
#include  <util/delay.h>

void fyldbadekar()
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	6b 97       	sbiw	r28, 0x1b	; 27
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	
	char Adresse[] = {'0','1','0','1','1','0','0','1','/0'};
 230:	89 e0       	ldi	r24, 0x09	; 9
 232:	e0 e0       	ldi	r30, 0x00	; 0
 234:	f2 e0       	ldi	r31, 0x02	; 2
 236:	de 01       	movw	r26, r28
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	01 90       	ld	r0, Z+
 23c:	0d 92       	st	X+, r0
 23e:	8a 95       	dec	r24
 240:	e1 f7       	brne	.-8      	; 0x23a <fyldbadekar+0x1e>
	char startFunktion[] = {'0','1','0','1','0','1','1','0','/0'};
 242:	89 e0       	ldi	r24, 0x09	; 9
 244:	e9 e0       	ldi	r30, 0x09	; 9
 246:	f2 e0       	ldi	r31, 0x02	; 2
 248:	de 01       	movw	r26, r28
 24a:	1a 96       	adiw	r26, 0x0a	; 10
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <fyldbadekar+0x30>
	char stopFunktion[] = {'0','1','0','1','1','0','0','1','/0'};
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	e0 e0       	ldi	r30, 0x00	; 0
 258:	f2 e0       	ldi	r31, 0x02	; 2
 25a:	de 01       	movw	r26, r28
 25c:	53 96       	adiw	r26, 0x13	; 19
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <fyldbadekar+0x42>
	
	sendX10(Adresse,startFunktion); //tænd 
 266:	be 01       	movw	r22, r28
 268:	66 5f       	subi	r22, 0xF6	; 246
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	30 d0       	rcall	.+96     	; 0x2d2 <sendX10>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	8f e4       	ldi	r24, 0x4F	; 79
 276:	93 ec       	ldi	r25, 0xC3	; 195
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <fyldbadekar+0x5c>
 280:	00 c0       	rjmp	.+0      	; 0x282 <fyldbadekar+0x66>
 282:	00 00       	nop
	
	_delay_ms(4000);
	
	sendX10(Adresse,stopFunktion); //sluk
 284:	be 01       	movw	r22, r28
 286:	6d 5e       	subi	r22, 0xED	; 237
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	21 d0       	rcall	.+66     	; 0x2d2 <sendX10>
 290:	6b 96       	adiw	r28, 0x1b	; 27
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <initPort>:
}

void initPort()
 {
	 //Port til udgang, x10 sender
	 DDRA = 0xFF;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	81 b9       	out	0x01, r24	; 1
	 PORTA = 00000000; 
 2a6:	12 b8       	out	0x02, r1	; 2
	 
	 //zerocross
	 DDRD = 0; //laver til indgang 
 2a8:	1a b8       	out	0x0a, r1	; 10
 2aa:	08 95       	ret

000002ac <initLEDport>:
	if (led_nr <= MAX_LED_NR)
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = ~0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	84 b9       	out	0x04, r24	; 4
 2b0:	15 b8       	out	0x05, r1	; 5
 2b2:	08 95       	ret

000002b4 <toggleLED>:
void toggleLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	60 f4       	brcc	.+24     	; 0x2d0 <toggleLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB ^ mask;
 2b8:	43 b1       	in	r20, 0x03	; 3
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <toggleLED+0x12>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <toggleLED+0xe>
 2ca:	cb 01       	movw	r24, r22
 2cc:	84 27       	eor	r24, r20
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	08 95       	ret

000002d2 <sendX10>:
#include <avr/io.h>
#include <assert.h>
int g_counter = 0;

sendX10(char* adresse, char* data)
{	
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	62 97       	sbiw	r28, 0x12	; 18
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	7b 01       	movw	r14, r22
	//send startsekvens 
	char buffer2[18] = {0};
 2f0:	8e 01       	movw	r16, r28
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	22 e1       	ldi	r18, 0x12	; 18
 2f8:	f8 01       	movw	r30, r16
 2fa:	11 92       	st	Z+, r1
 2fc:	2a 95       	dec	r18
 2fe:	e9 f7       	brne	.-6      	; 0x2fa <sendX10+0x28>
	
	strcpy(buffer2,adresse); 
 300:	bc 01       	movw	r22, r24
 302:	c8 01       	movw	r24, r16
 304:	3a d0       	rcall	.+116    	; 0x37a <strcpy>
	
	strcat(buffer2,data);
 306:	b7 01       	movw	r22, r14
 308:	c8 01       	movw	r24, r16
 30a:	2c d0       	rcall	.+88     	; 0x364 <strcat>
 30c:	f8 01       	movw	r30, r16
	
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
	{
		PORTA &= 11111110;
 312:	92 b1       	in	r25, 0x02	; 2
 314:	96 7c       	andi	r25, 0xC6	; 198
 316:	92 b9       	out	0x02, r25	; 2
		
		while (x10_counter == g_counter) //tjekker om der er kommet zeroCross
 318:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <g_counter>
 31c:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <g_counter+0x1>
 320:	42 17       	cp	r20, r18
 322:	53 07       	cpc	r21, r19
 324:	e9 f3       	breq	.-6      	; 0x320 <sendX10+0x4e>
		{
			
		}
		assert(x10_counter+1 == g_counter);
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	42 17       	cp	r20, r18
 32c:	53 07       	cpc	r21, r19
 32e:	09 f0       	breq	.+2      	; 0x332 <sendX10+0x60>
 330:	15 d0       	rcall	.+42     	; 0x35c <abort>
		
		x10_counter = g_counter;
		
		char c;
		
		c = buffer2[counter];
 332:	81 91       	ld	r24, Z+
		
		//sætte ben højt, hvis c = 1
		if(c==1)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	09 f4       	brne	.+2      	; 0x33a <sendX10+0x68>
		{
			PORTA |= 00000001;
 338:	10 9a       	sbi	0x02, 0	; 2
		{
			
		}
		assert(x10_counter+1 == g_counter);
		
		x10_counter = g_counter;
 33a:	9a 01       	movw	r18, r20
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
 33c:	40 31       	cpi	r20, 0x10	; 16
 33e:	51 05       	cpc	r21, r1
 340:	41 f7       	brne	.-48     	; 0x312 <sendX10+0x40>
		{
			PORTA |= 00000001;
		}
		counter++;
	}
}
 342:	62 96       	adiw	r28, 0x12	; 18
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	08 95       	ret

0000035c <abort>:
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	f8 94       	cli
 362:	12 c0       	rjmp	.+36     	; 0x388 <_exit>

00000364 <strcat>:
 364:	fb 01       	movw	r30, r22
 366:	dc 01       	movw	r26, r24
 368:	0d 90       	ld	r0, X+
 36a:	00 20       	and	r0, r0
 36c:	e9 f7       	brne	.-6      	; 0x368 <strcat+0x4>
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	00 20       	and	r0, r0
 376:	e1 f7       	brne	.-8      	; 0x370 <strcat+0xc>
 378:	08 95       	ret

0000037a <strcpy>:
 37a:	fb 01       	movw	r30, r22
 37c:	dc 01       	movw	r26, r24
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	00 20       	and	r0, r0
 384:	e1 f7       	brne	.-8      	; 0x37e <strcpy+0x4>
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
