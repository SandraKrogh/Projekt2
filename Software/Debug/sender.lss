
sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800212  00800212  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137d  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe8  00000000  00000000  00001939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000879  00000000  00000000  00002921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a0  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003f16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	c0 c0       	rjmp	.+384    	; 0x18e <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 eb       	ldi	r30, 0xB4	; 180
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	47 c1       	rjmp	.+654    	; 0x3b0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define F_CPU 16000000
#include  <util/delay.h>

int main(void)
{	
	initLEDport();
 124:	c8 d0       	rcall	.+400    	; 0x2b6 <initLEDport>
	initInterrupt();
 126:	b1 d0       	rcall	.+354    	; 0x28a <initInterrupt>
	initTimer();
 128:	9c d0       	rcall	.+312    	; 0x262 <initTimer>
 12a:	c0 d0       	rcall	.+384    	; 0x2ac <initPort>
	initPort();
 12c:	78 94       	sei
 12e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
    /* Replace with your application code */
	
	while(1) 
    {
		//test af sekund tæller
 		if(sek %2 == 0)
 132:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 136:	80 fd       	sbrc	r24, 0
 138:	0c c0       	rjmp	.+24     	; 0x152 <main+0x2e>
 13a:	83 e0       	ldi	r24, 0x03	; 3
 		{
 		turnOnLED(3);
 13c:	c0 d0       	rcall	.+384    	; 0x2be <turnOnLED>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x20>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x2a>
 14e:	00 00       	nop
 150:	ee cf       	rjmp	.-36     	; 0x12e <main+0xa>
 152:	83 e0       	ldi	r24, 0x03	; 3
 		_delay_ms(100);
 		}
		else
 		turnOffLED(3);
 154:	c3 d0       	rcall	.+390    	; 0x2dc <turnOffLED>
 156:	eb cf       	rjmp	.-42     	; 0x12e <main+0xa>

00000158 <__vector_20>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
	}
}

//real time
ISR(TIMER1_OVF_vect)
{ 
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
  sek++;
 166:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 16a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 174:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
  
  if( sek > 86500) 
 178:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 17c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
  {
	 toggleLED(3);
	 sek=0;
  }
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_3>:

//til badekaret 
ISR(INT2_vect) 
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	fyldbadekar();
 1b4:	13 d0       	rcall	.+38     	; 0x1dc <fyldbadekar>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0b be       	out	0x3b, r0	; 59
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <fyldbadekar>:

#define F_CPU 16000000
#include  <util/delay.h>

void fyldbadekar()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	6b 97       	sbiw	r28, 0x1b	; 27
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	
	char Adresse[] = {'0','1','0','1','1','0','0','1','/0'};
 1f0:	89 e0       	ldi	r24, 0x09	; 9
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	f2 e0       	ldi	r31, 0x02	; 2
 1f6:	de 01       	movw	r26, r28
 1f8:	11 96       	adiw	r26, 0x01	; 1
 1fa:	01 90       	ld	r0, Z+
 1fc:	0d 92       	st	X+, r0
 1fe:	8a 95       	dec	r24
 200:	e1 f7       	brne	.-8      	; 0x1fa <fyldbadekar+0x1e>
	char startFunktion[] = {'0','1','0','1','0','1','1','0','/0'};
 202:	89 e0       	ldi	r24, 0x09	; 9
 204:	e9 e0       	ldi	r30, 0x09	; 9
 206:	f2 e0       	ldi	r31, 0x02	; 2
 208:	de 01       	movw	r26, r28
 20a:	1a 96       	adiw	r26, 0x0a	; 10
 20c:	01 90       	ld	r0, Z+
 20e:	0d 92       	st	X+, r0
 210:	8a 95       	dec	r24
 212:	e1 f7       	brne	.-8      	; 0x20c <fyldbadekar+0x30>
	char stopFunktion[] = {'0','1','0','1','1','0','0','1','/0'};
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	e0 e0       	ldi	r30, 0x00	; 0
 218:	f2 e0       	ldi	r31, 0x02	; 2
 21a:	de 01       	movw	r26, r28
 21c:	53 96       	adiw	r26, 0x13	; 19
 21e:	01 90       	ld	r0, Z+
 220:	0d 92       	st	X+, r0
 222:	8a 95       	dec	r24
 224:	e1 f7       	brne	.-8      	; 0x21e <fyldbadekar+0x42>
	
	sendX10(Adresse,startFunktion); //tænd 
 226:	be 01       	movw	r22, r28
 228:	66 5f       	subi	r22, 0xF6	; 246
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	64 d0       	rcall	.+200    	; 0x2fa <sendX10>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	8f e4       	ldi	r24, 0x4F	; 79
 236:	93 ec       	ldi	r25, 0xC3	; 195
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <fyldbadekar+0x5c>
 240:	00 c0       	rjmp	.+0      	; 0x242 <fyldbadekar+0x66>
 242:	00 00       	nop
	
	_delay_ms(4000);
	
	sendX10(Adresse,stopFunktion); //sluk
 244:	be 01       	movw	r22, r28
 246:	6d 5e       	subi	r22, 0xED	; 237
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	55 d0       	rcall	.+170    	; 0x2fa <sendX10>
 250:	6b 96       	adiw	r28, 0x1b	; 27
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <initTimer>:

void initTimer()
{
	//Lys Timer1 initiering
	//normal mode 
	TCNT1 = 49912; //har før haft 49912
 262:	88 ef       	ldi	r24, 0xF8	; 248
 264:	92 ec       	ldi	r25, 0xC2	; 194
 266:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 26a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1A = 0b00000000;
 26e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00000101; //prescale 1024
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	//Lys timer 3 initiering
	TCNT3 = 0;
 278:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 27c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TCCR3A = 0b00000000;
 280:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000101; //prescale 1024
 284:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
 288:	08 95       	ret

0000028a <initInterrupt>:
}

void initInterrupt()
{
	//Badekar interupt 2 
	EIMSK |= 0b00000100;
 28a:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA = 0b00100000;
 28c:	e9 e6       	ldi	r30, 0x69	; 105
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	80 83       	st	Z, r24
	
	//Lys interrupt 0 zeroCross
	EICRA = 0b00000011;
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	80 83       	st	Z, r24
	EIMSK |= 0b00000001;
 298:	e8 9a       	sbi	0x1d, 0	; 29
	
	//Lys interrupt 3 wait funktion
	EICRA = 0b00000011;
 29a:	80 83       	st	Z, r24
	EIMSK |= 0b00001000;
 29c:	eb 9a       	sbi	0x1d, 3	; 29
	
	//enables timer 3 interrupt wait funktion
	TIMSK3 = 0b00001000;
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	
	//enables timer 1 interrupt 
	TIMSK1 = 0b00000001;  //interrupt på overflow 
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 2aa:	08 95       	ret

000002ac <initPort>:
}

void initPort()
 {
	 //Port til udgang, x10 sender
	 DDRA = 0xFF;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	81 b9       	out	0x01, r24	; 1
	 PORTA = 00000000; 
 2b0:	12 b8       	out	0x02, r1	; 2
	 
	 //zerocross
	 DDRD = 0; //laver til indgang 
 2b2:	1a b8       	out	0x0a, r1	; 10
 2b4:	08 95       	ret

000002b6 <initLEDport>:
}

void writeAllLEDs(unsigned char pattern)
{
	// Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	84 b9       	out	0x04, r24	; 4
 2ba:	15 b8       	out	0x05, r1	; 5
 2bc:	08 95       	ret

000002be <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	60 f4       	brcc	.+24     	; 0x2da <turnOnLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB | mask;
 2c2:	43 b1       	in	r20, 0x03	; 3
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <turnOnLED+0x12>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <turnOnLED+0xe>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 2b       	or	r24, r20
 2d8:	85 b9       	out	0x05, r24	; 5
 2da:	08 95       	ret

000002dc <turnOffLED>:
void turnOffLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 2dc:	88 30       	cpi	r24, 0x08	; 8
 2de:	60 f4       	brcc	.+24     	; 0x2f8 <turnOffLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = ~0b00000001 << led_nr;
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 2e0:	43 b1       	in	r20, 0x03	; 3
 2e2:	2e ef       	ldi	r18, 0xFE	; 254
 2e4:	3f ef       	ldi	r19, 0xFF	; 255
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <turnOffLED+0x12>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <turnOffLED+0xe>
 2f2:	cb 01       	movw	r24, r22
 2f4:	84 23       	and	r24, r20
 2f6:	85 b9       	out	0x05, r24	; 5
 2f8:	08 95       	ret

000002fa <sendX10>:
#include <avr/io.h>
#include <assert.h>
int g_counter = 0;

sendX10(char* adresse, char* data)
{	
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	62 97       	sbiw	r28, 0x12	; 18
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	7b 01       	movw	r14, r22
	//send startsekvens 
	char buffer2[18] = {0};
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	22 e1       	ldi	r18, 0x12	; 18
 320:	f8 01       	movw	r30, r16
 322:	11 92       	st	Z+, r1
 324:	2a 95       	dec	r18
 326:	e9 f7       	brne	.-6      	; 0x322 <sendX10+0x28>
	
	strcpy(buffer2,adresse); 
 328:	bc 01       	movw	r22, r24
 32a:	c8 01       	movw	r24, r16
 32c:	3a d0       	rcall	.+116    	; 0x3a2 <strcpy>
	
	strcat(buffer2,data);
 32e:	b7 01       	movw	r22, r14
 330:	c8 01       	movw	r24, r16
 332:	2c d0       	rcall	.+88     	; 0x38c <strcat>
 334:	f8 01       	movw	r30, r16
	
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
	{
		PORTA &= 11111110;
 33a:	92 b1       	in	r25, 0x02	; 2
 33c:	96 7c       	andi	r25, 0xC6	; 198
 33e:	92 b9       	out	0x02, r25	; 2
		
		while (x10_counter == g_counter) //tjekker om der er kommet zeroCross
 340:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <g_counter>
 344:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <g_counter+0x1>
 348:	42 17       	cp	r20, r18
 34a:	53 07       	cpc	r21, r19
 34c:	e9 f3       	breq	.-6      	; 0x348 <sendX10+0x4e>
		{
			
		}
		assert(x10_counter+1 == g_counter);
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	42 17       	cp	r20, r18
 354:	53 07       	cpc	r21, r19
 356:	09 f0       	breq	.+2      	; 0x35a <sendX10+0x60>
 358:	15 d0       	rcall	.+42     	; 0x384 <abort>
		
		x10_counter = g_counter;
		
		char c;
		
		c = buffer2[counter];
 35a:	81 91       	ld	r24, Z+
		
		//sætte ben højt, hvis c = 1
		if(c==1)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f4       	brne	.+2      	; 0x362 <sendX10+0x68>
		{
			PORTA |= 00000001;
 360:	10 9a       	sbi	0x02, 0	; 2
		{
			
		}
		assert(x10_counter+1 == g_counter);
		
		x10_counter = g_counter;
 362:	9a 01       	movw	r18, r20
	//manchester kode ind i buffer
	int counter = 0;
	int x10_counter = 0;
	
	
	while  (counter < 16) //tjekker om alle tegn er sendt
 364:	40 31       	cpi	r20, 0x10	; 16
 366:	51 05       	cpc	r21, r1
 368:	41 f7       	brne	.-48     	; 0x33a <sendX10+0x40>
		{
			PORTA |= 00000001;
		}
		counter++;
	}
}
 36a:	62 96       	adiw	r28, 0x12	; 18
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	08 95       	ret

00000384 <abort>:
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	f8 94       	cli
 38a:	12 c0       	rjmp	.+36     	; 0x3b0 <_exit>

0000038c <strcat>:
 38c:	fb 01       	movw	r30, r22
 38e:	dc 01       	movw	r26, r24
 390:	0d 90       	ld	r0, X+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <strcat+0x4>
 396:	11 97       	sbiw	r26, 0x01	; 1
 398:	01 90       	ld	r0, Z+
 39a:	0d 92       	st	X+, r0
 39c:	00 20       	and	r0, r0
 39e:	e1 f7       	brne	.-8      	; 0x398 <strcat+0xc>
 3a0:	08 95       	ret

000003a2 <strcpy>:
 3a2:	fb 01       	movw	r30, r22
 3a4:	dc 01       	movw	r26, r24
 3a6:	01 90       	ld	r0, Z+
 3a8:	0d 92       	st	X+, r0
 3aa:	00 20       	and	r0, r0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <strcpy+0x4>
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
