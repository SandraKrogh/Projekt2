
LysApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000001b8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800226  00800226  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001064  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d98  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f3  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025c  00000000  00000000  00002d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 eb       	ldi	r30, 0xB8	; 184
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 32       	cpi	r26, 0x26	; 38
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e2       	ldi	r26, 0x26	; 38
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 33       	cpi	r26, 0x33	; 51
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	12 d0       	rcall	.+36     	; 0x144 <main>
 120:	49 c0       	rjmp	.+146    	; 0x1b4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <wait>:
   	return 0;
}

void wait(int increase)
{
	for(unsigned int i=0; i < increase; i++)
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	69 f0       	breq	.+26     	; 0x142 <wait+0x1e>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	ef e9       	ldi	r30, 0x9F	; 159
 12e:	ff e0       	ldi	r31, 0x0F	; 15
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <wait+0xc>
 134:	00 c0       	rjmp	.+0      	; 0x136 <wait+0x12>
 136:	00 00       	nop
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	a9 f7       	brne	.-22     	; 0x12c <wait+0x8>
 142:	08 95       	ret

00000144 <main>:
int main(void)
{
	int intensityCounter = 0;
	int increase = 100;
	
	initLEDport();
 144:	2a d0       	rcall	.+84     	; 0x19a <initLEDport>
char array[16] = {'1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0'}; //startsekvens

int main(void)
{
	int intensityCounter = 0;
	int increase = 100;
 146:	04 e6       	ldi	r16, 0x64	; 100
 148:	10 e0       	ldi	r17, 0x00	; 0
char increaseArray[12] = {'1','1','1','0','0','1','0','1','1','0','1','0','/0'}; //increase
char array[16] = {'1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0'}; //startsekvens

int main(void)
{
	int intensityCounter = 0;
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d0 e0       	ldi	r29, 0x00	; 0
	 }
	 
	 if(intensityCounter == 1)
	 {
		// toggleLED(2);
		 wait(increase);
 14e:	cc 24       	eor	r12, r12
 150:	c3 94       	inc	r12
 152:	d1 2c       	mov	r13, r1
	 }
	 
	 if(strcmp(buffer,stopArray)==0)
	 {
		// turnOffLED(2);
		 intensityCounter = 0;
 154:	e1 2c       	mov	r14, r1
 156:	f1 2c       	mov	r15, r1
	initLEDport();
	
	while(1)
	{

	if(strcmp(buffer,startArray)==0) 
 158:	68 e1       	ldi	r22, 0x18	; 24
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	86 e2       	ldi	r24, 0x26	; 38
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	20 d0       	rcall	.+64     	; 0x1a2 <strcmp>
 162:	89 2b       	or	r24, r25
 164:	19 f0       	breq	.+6      	; 0x16c <main+0x28>
	 {
		intensityCounter = 1; 
	 }
	 
	 if(intensityCounter == 1)
 166:	c1 30       	cpi	r28, 0x01	; 1
 168:	d1 05       	cpc	r29, r1
	 {
		// toggleLED(2);
		 wait(increase);
 16a:	21 f4       	brne	.+8      	; 0x174 <main+0x30>
 16c:	c8 01       	movw	r24, r16
 16e:	da df       	rcall	.-76     	; 0x124 <wait>
 170:	cc 2d       	mov	r28, r12
 172:	dd 2d       	mov	r29, r13
	 }
	 
	 if(strcmp(buffer,stopArray)==0)
 174:	6c e0       	ldi	r22, 0x0C	; 12
 176:	72 e0       	ldi	r23, 0x02	; 2
 178:	86 e2       	ldi	r24, 0x26	; 38
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	12 d0       	rcall	.+36     	; 0x1a2 <strcmp>
 17e:	89 2b       	or	r24, r25
 180:	11 f4       	brne	.+4      	; 0x186 <main+0x42>
	 {
		// turnOffLED(2);
		 intensityCounter = 0;
 182:	ce 2d       	mov	r28, r14
 184:	df 2d       	mov	r29, r15
	 }
	 
	 if(strcmp(buffer,increaseArray)==0)
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	72 e0       	ldi	r23, 0x02	; 2
 18a:	86 e2       	ldi	r24, 0x26	; 38
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	09 d0       	rcall	.+18     	; 0x1a2 <strcmp>
 190:	89 2b       	or	r24, r25
 192:	11 f7       	brne	.-60     	; 0x158 <main+0x14>
	 {
		 increase -= 10;
 194:	0a 50       	subi	r16, 0x0A	; 10
 196:	11 09       	sbc	r17, r1
 198:	df cf       	rjmp	.-66     	; 0x158 <main+0x14>

0000019a <initLEDport>:
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport()
{
	DDRB = 0xFF; //PORTB til udgange
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 b9       	out	0x04, r24	; 4
	PORTB = 00000000;
 19e:	15 b8       	out	0x05, r1	; 5
 1a0:	08 95       	ret

000001a2 <strcmp>:
 1a2:	fb 01       	movw	r30, r22
 1a4:	dc 01       	movw	r26, r24
 1a6:	8d 91       	ld	r24, X+
 1a8:	01 90       	ld	r0, Z+
 1aa:	80 19       	sub	r24, r0
 1ac:	01 10       	cpse	r0, r1
 1ae:	d9 f3       	breq	.-10     	; 0x1a6 <strcmp+0x4>
 1b0:	99 0b       	sbc	r25, r25
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
